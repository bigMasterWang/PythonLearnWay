# -*- coding: utf-8 -*- 
# @Time     : 2021/5/25 21:00 
# @Author   : wangxiaofeng01@corp.netease.com
# @desc:    :
# x = ['3005002', '3005004', '3005005', '3005006', '3005007', '3005008', '3005009', '3005010', '3005011', '3005012', '3005013', '3005014', '3005015', '3005016', '3005017', '3005018', '3005019', '3005020', '3005021', '3005022', '3005023', '3005024', '3005025', '3005026', '3005027', '3005028', '3005029', '3005030', '3005031', '3005032', '3005033', '3005034', '3005035', '3005036', '3005037', '3005038', '3005039', '3005040', '3005041', '3005042', '3005043', '3005044', '3005045', '3005046', '3005047', '3005048', '3005049', '3005050', '3005051', '3005052', '3005053', '3005054', '3005055', '3005056', '3005057', '3005058', '3005059', '3005060', '3005061', '3005062', '3005063', '3005064', '3005065', '3005066', '3005067', '3005068', '3005069', '3005070', '3005071', '3005072', '3005073', '3005074', '3005075', '3005076', '3005077', '3005078', '3005079', '3005080', '3005081', '3005082', '3005083', '3005084', '3005085', '3005086', '3005087', '3005088', '3005089', '3005090', '3005091', '3005092', '3005093', '3005094', '3005095', '3005096', '3005097', '3005098', '3005099', '3005100', '3005101', '3005102', '3005103', '3005104', '3005105', '3005106', '3005107', '3005108', '3005109', '3005110', '3005111', '3005112', '3005113', '3005114', '3005115', '3005116', '3005117', '3005118', '3005119', '3005120', '3005121', '3005122', '3005123', '3005124', '3005125', '3005126', '3005127', '3005128', '3005129', '3005130', '3005131', '3005132', '3005133', '3005134', '3005135', '3005136', '3005137', '3005138', '3005139', '3005140', '3005142', '3005143', '3005144', '3005145', '3005146', '3005147', '3005148', '3005149', '3005150', '3005151', '3005152', '3005153', '3005154', '3005155', '3005156', '3005157', '3005158', '3005160', '3005162', '3005163', '3005164', '3005165', '3005166', '3005167', '3005168', '3005169', '3005170', '3005171', '3005172', '3005190', '3005191', '3005192', '3005193', '3005194', '3005195', '3005196', '3005197', '3005198', '3005199', '3005200', '3005201', '3005202', '3005203', '3005204', '3005209', '3005210', '3005211', '3005212', '3005213', '3005214', '3005215',
# '3005216', '3005218', '3005219', '3005220', '3005221', '3005222', '3005225', '3005226', '3005228', '3005229', '3005230', '3005231', '3005233', '3005235', '3005238', '3005242', '3005249', '3005252', '3005254', '3005255', '3005258', '3005262', '3005266', '3005267', '3005270', '3005271', '3005275', '3005276', '3005277', '2000122', '2000127', '2002001', '2002002', '2002003', '2002004', '2002005', '2002006', '2002007', '2002008', '2002009', '2002010', '2002011', '2002012', '2002013', '2002014', '2002015', '2002017', '2002018', '2002019', '2002020', '2002021', '2002022', '2002023', '2002105', '2002108', '2002109', '2002110', '2003003', '2003006', '2003009', '2003011', '2003012', '2003013', '2003014', '2003015', '2003032', '2003039', '2003041', '2004002', '2004003', '2005001', '2040712', '2040802', '2041006', '2041010', '2041011', '2041202', '2041305', '2041308', '2041802', '2041901', '2042002', '2042201', '2042207', '2042208', '2042209', '2042305', '2043005', '2043013', '2043018', '2043601', '2043705', '2050001', '2050002', '2050003', '2099998', '2099999', '2200001', '2200002', '2200003', '2200005', '2200006', '2200014', '2200017', '2500106', '2500601', '2500603', '2500608', '2500816', '2500817', '2500818', '2500819', '2500820', '2500821', '2500822', '2500824', '2500826', '2500827', '2500828', '2500829', '2500831', '2500832', '2500834', '2500835', '2500836', '2500837', '2500838', '2500840', '2500841', '2500842', '2500843', '2500844', '2500846', '2500847', '2500848', '2500849', '2500850', '2500861', '2500862', '2500863', '2500864', '2500865', '2500866', '2500867', '2500868', '2500869', '2500870', '2500875', '2500876', '2501005', '2501006', '2501007', '2501038', '2501047']
# print x


# type是object的子类, 也是type的实例
# object是type的实例




class Quantity(object):

	_counter = 0

	def __init__(self):
		cls = self.__class__
		self.storage_name = '_{}#{}'.format(cls.__name__, cls._counter)
		cls._counter += 1

	def __get__(self, instance, owner):
		if not instance:
			return self
		else:
			return getattr(instance, self.storage_name)

	def __set__(self, instance, value):
		setattr(instance, self.storage_name, value)

class EntityMeta(type):

	def __init__(cls, name, bases, attr_dict):
		cls._filed_names = []
		super(EntityMeta, cls).__init__(name, bases, attr_dict)
		for key, attr in attr_dict.iteritems():
			if isinstance(attr, Quantity):
				type_name = type(attr).__name__
				attr.storage_name = '_{}#{}'.format(type_name, key)
				cls._filed_names.append(key)


class Entity(object):

	__metaclass__ = EntityMeta

	@classmethod
	def field_names(cls):
		for name in cls._filed_names:
			yield name



class LineItem(Entity):

	desc = Quantity()
	weight = Quantity()
	price = Quantity()

	def __init__(self, desc,  weight, price):
		self.desc = desc
		self.weight = weight
		self.price = price

	def subtotal(self):
		return self.weight * self.price



x = LineItem('123', 1.5, 10)
print x.subtotal()
print dir(x)

for name in x.field_names():
	print name

