# coding=utf-8
# 会修电脑不会修收音机——依赖倒转原则
# 我靠，内存插条， 开放封闭原则， 对扩展开放， 对修改封闭

# 依赖倒转原则， 抽象不应该依赖细节， 细节应该以来抽象
# 针对接口编程， 不应该针对实现编程（无论主板，cpu，硬盘，内存，都是针对接口设计的）

# 高层模块不应该依赖底层模块，二者都应该依赖抽象
# 抽象不应该依赖细节，细节应该以来抽象

# 里氏代换原则：子类必须能够替换掉他们的父类
# 一个软件实体如果使用的是一个父类的话，那么一定是用于其子类
# 而且他察觉不出父类对象和子类对象的区别，也就是说，在软件里面
# 把父类都替换成他们的子类，程序的行为没有变化
# 面向对象设计时，企鹅能继承成鸟类吗？
# 不能， 子类拥有父类所有的非private的行为和属性

# 只有当子类可以替换掉父类，软件单位的功能不受影响时
# 父类才能真正的被复用
# 正是由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展
# 不然还谈什么扩展开放，修改关闭呢？
# 里氏替换原则 => 开闭原则

# 所以依赖倒转就是谁也不依赖谁,除了约定的接口,大家都可以灵活自如